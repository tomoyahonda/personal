r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS, AA=AA)
AA <- rep(1, times = numboxes)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, APHIDS, AA, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(dAPHIDS, dAA)
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS, AA=AA) # initialise state variables
AA <- rep(1, times = numboxes)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, AA, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
#########################################################################
parameters <- c(a = -8/3, b = -10, c = 24)
state <- c(X = 2, Y = 1, Z = 1)
Lorenz<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X*Y + c*Y - Z
# return the rate of change
list(c(dX, dY, dZ))
}) # end with(as.list ...
}
times <- seq(0, 100, by = 0.01)
library(deSolve)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
head(out)
par(oma = c(0, 0, 3, 0))
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Z"], pch = ".")
mtext(outer = TRUE, side = 3, "Lorenz model", cex = 1.5)
##############################################################################
library(ReacTran)
FTR.model <- function (time, SO4, pars) {
transport <- tran.1D (C = SO4, flux.up = Flux, v = v, D = D, dx = grid)
reaction <- r * SO4 / (ks+SO4)
dSO4 <- transport$dC - reaction
list(dSO4, SO4out = SO4[N.layer])
}
# parameters
Flux = 0.06 ; D = 0.039 ; v = 0.1 ; ks = 0.16 ; r = 0.032
# the model grid
N.layer = 100
grid = setup.grid.1D(L = 2, N = N.layer)
# model solution and plotting
times =seq(from=0,to=100,by=1)
SO4ini = rep(1, length.out = N.layer)
out = ode.1D(func = FTR.model, y = SO4ini, parms = 0, times = times, nspec = 1)
plot(out, which = "SO4out", xlab = "time, hour", ylab = "mM", main = "Sulfate")
# plot in a different way
image(out, method = "filled.contour")
image(out, method = "persp", border = NA, theta = 30)
matplot.1D(out, type = "l", lwd = 2, xyswap = TRUE, lty = 1)
##############################################################################
library(ReacTran)
FTR.model <- function (time, rho, AA, pars) {
rho_transport <- tran.1D (C = rho, v = v, D = Drho, dx = grid)
rho_reaction <- r * rho
drho <- rho_transport$dC + rho_reaction
AA_transport <- tran.1D(C = AA, D = Da, dx = grid)
AA_reaction <- r * rho
dAA <- AA_transport$dC - AA_reaction
v <- -dAA
list(drho, dAA, rhoout = rho[N.layer], AAout = AA[N.layer])
}
# parameters
Drho = 100 ; Da = 0.01 ; r = 1
# the model grid
N.layer = 60
grid = setup.grid.1D(L = 60, N = N.layer)
# model solution and plotting
times =seq(from=0,to=200,by=1)
rhoini = rep(1, length.out = N.layer)
out = ode.1D(func = FTR.model, y = rhoini, parms = 0, times = times, nspec = 1)
plot(out, which = "rhoout", xlab = "time, hour", ylab = "mM", main = "Sulfate")
# plot in a different way
image(out, method = "filled.contour")
image(out, method = "persp", border = NA, theta = 30)
##############################################################################
Aphid <- function(t, APHIDS, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
# the return value
list(dAPHIDS)
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state <- c(APHIDS = APHIDS) # initialise state variables
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
##############################################################################
Aphid <- function(t, APHIDS, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(dAPHIDS, dAA)
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS, AA=AA) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, AA, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, APHIDS, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(dAPHIDS, dAA)
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS, AA=AA) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, APHIDS, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(dAPHIDS, dAA)
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS, AA=AA) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
state1
state2
state <- c(state1, state2)
state
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
state <- c(state1, state2)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
APHIDS
state1
state2
state <- c(APHIDS = state1, AA = state2)
state
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
state <- c(APHIDS = state1, AA = state2)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
deltax
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
Flux
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAPHIDS
list(c(dAPHIDS, dAA))
state
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
state <- c(APHIDS = state1, AA = state2)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, APHIDS, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
state <- c(APHIDS = state1, AA = state2)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphids, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
state <- c(APHIDS = state1, AA = state2)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
image(out, method = "filled.contour", grid = Distance,
xlab = "time, days", ylab = "Distance on plant, m",
main = "Aphid density on a row of plants")
Aphid <- function(t, state, parameters) {
deltax <- c (0.5, rep(1, numboxes - 1), 0.5)
Flux <- -D * diff(c(0, APHIDS, 0)) / deltax
dAPHIDS <- -diff(Flux) / delx + APHIDS * r
dAA <- - APHIDS * r
# the return value
list(c(dAPHIDS, dAA))
} # end
#parameters
D <- 0.3 # m2/day diffusion rate
r <- 0.01 # /day net growth rate
delx <- 1 # m thickness of boxes
numboxes <- 60
# distance of boxes on plant, m, 1 m intervals
Distance <- seq(from = 0.5, by = delx, length.out = numboxes)
# Initial conditions: # ind/m2
APHIDS <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state1 <- c(APHIDS = APHIDS) # initialise state variables
AA <- rep(1, times = numboxes)
state2 <- c(AA = AA)
state <- c(APHIDS = state1, AA = state2)
times <-seq(0, 200, by = 1)
out <- ode.1D(state, times, Aphid, parms = 0, nspec = 1, names = "Aphid")
plot(out, which = "AA", xlab = "time, hour", ylab = "mM", main = "Sulfate")
##############################################################################
out
install.packages("rmarkdown")
touch _site.yml #"YML" file that tells your website how to assemble itself
touch index.Rmd #Create the main rmd file
touch about.Rmd #Create an about file
install.packages("rmarkdown", type = "source")
touch build_site.R
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users//Users/hondatomoya/Dropbox/Personalsite")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite")
#render your sweet site.
rmarkdown::render_site()
setwd("/Users/hondatomoya/Dropbox/Personalsite")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite/personal")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite/personal")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite/personal")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite/personal")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite/personal")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite/personal")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/hondatomoya/Dropbox/Personalsite/personal")
#render your sweet site.
rmarkdown::render_site()
